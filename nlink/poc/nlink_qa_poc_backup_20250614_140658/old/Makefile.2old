# =============================================================================
# NexusLink QA POC - Production C Library Build System
# OBINexus Engineering - Aegis Project Implementation
# =============================================================================

# Compiler and build configuration
CC = gcc
AR = ar
CFLAGS = -Wall -Wextra -std=c99 -fPIC -O2 -DNLINK_VERSION=\"1.0.0\"
DEBUG_FLAGS = -g -DDEBUG -O0
LDFLAGS = -shared
ARFLAGS = rcs

# Project configuration
PROJECT_NAME = nlink_qa_poc
LIB_NAME = nlink
VERSION = 1.0.0

# Directory structure
SRC_DIR = src
INCLUDE_DIR = include
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj
BIN_DIR = bin
LIB_DIR = lib

# Source files
CLI_SOURCES = $(wildcard $(SRC_DIR)/cli/*.c)
CORE_SOURCES = $(wildcard $(SRC_DIR)/core/*.c)
MAIN_SOURCE = $(SRC_DIR)/main.c
NLINK_CORE_SOURCE = $(SRC_DIR)/nlink.c

# Object files
CLI_OBJECTS = $(CLI_SOURCES:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
CORE_OBJECTS = $(CORE_SOURCES:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
NLINK_CORE_OBJECT = $(NLINK_CORE_SOURCE:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
ALL_OBJECTS = $(CLI_OBJECTS) $(CORE_OBJECTS) $(NLINK_CORE_OBJECT)

# Library targets
STATIC_LIB = $(LIB_DIR)/lib$(LIB_NAME).a
SHARED_LIB = $(LIB_DIR)/lib$(LIB_NAME).so.$(VERSION)
SHARED_LIB_LINK = $(LIB_DIR)/lib$(LIB_NAME).so

# Executable targets
CLI_EXECUTABLE = $(BIN_DIR)/nlink

# Include paths
INCLUDE_PATHS = -I$(INCLUDE_DIR)

# =============================================================================
# Main Build Targets
# =============================================================================

.PHONY: all clean test debug release directories help install

# Default target
all: release

# Production build
release: CFLAGS += -DNDEBUG -O2
release: directories $(STATIC_LIB) $(SHARED_LIB) $(CLI_EXECUTABLE)
	@echo "‚úÖ Production build completed successfully"
	@echo "   Static library: $(STATIC_LIB)"
	@echo "   Shared library: $(SHARED_LIB)"
	@echo "   CLI executable: $(CLI_EXECUTABLE)"

# Debug build
debug: CFLAGS += $(DEBUG_FLAGS)
debug: directories $(STATIC_LIB) $(SHARED_LIB) $(CLI_EXECUTABLE)
	@echo "üêõ Debug build completed"

# Create directories
directories:
	@mkdir -p $(OBJ_DIR)/cli $(OBJ_DIR)/core $(BIN_DIR) $(LIB_DIR)

# =============================================================================
# Library Build Rules
# =============================================================================

# Static library
$(STATIC_LIB): $(ALL_OBJECTS)
	@echo "[AR] Creating static library: $@"
	$(AR) $(ARFLAGS) $@ $^

# Shared library
$(SHARED_LIB): $(ALL_OBJECTS)
	@echo "[LD] Creating shared library: $@"
	$(CC) $(LDFLAGS) -Wl,-soname,lib$(LIB_NAME).so.1 -o $@ $^
	@ln -sf lib$(LIB_NAME).so.$(VERSION) $(SHARED_LIB_LINK)

# CLI executable
$(CLI_EXECUTABLE): $(STATIC_LIB) $(MAIN_SOURCE)
	@echo "[CC] Building CLI executable: $@"
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -L$(LIB_DIR) $(MAIN_SOURCE) -l$(LIB_NAME) -o $@

# =============================================================================
# Object File Compilation Rules
# =============================================================================

# CLI objects
$(OBJ_DIR)/cli/%.o: $(SRC_DIR)/cli/%.c
	@echo "[CC] Compiling CLI module: $<"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -c $< -o $@

# Core objects
$(OBJ_DIR)/core/%.o: $(SRC_DIR)/core/%.c
	@echo "[CC] Compiling core module: $<"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -c $< -o $@

# Main nlink object
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "[CC] Compiling main module: $<"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(INCLUDE_PATHS) -c $< -o $@

# =============================================================================
# Testing and Validation
# =============================================================================

# Build unit tests with library
test: $(STATIC_LIB)
	@echo "[TEST] Building unit tests"
	@if [ -f test/unit/test_config_parsing.c ]; then \
		$(CC) $(CFLAGS) $(INCLUDE_PATHS) -L$(LIB_DIR) \
			test/unit/test_config_parsing.c -l$(LIB_NAME) \
			-o $(BIN_DIR)/test_config_parsing; \
		echo "‚úÖ Unit tests built successfully"; \
	else \
		echo "‚ö†Ô∏è  Unit test source not found"; \
	fi

# Run unit tests
test-run: test
	@echo "[TEST] Running unit tests"
	@if [ -f $(BIN_DIR)/test_config_parsing ]; then \
		$(BIN_DIR)/test_config_parsing; \
	else \
		echo "‚ö†Ô∏è  Unit test executable not found"; \
	fi

# Library information
info:
	@echo "NexusLink Library Build Information"
	@echo "==================================="
	@echo "Project: $(PROJECT_NAME)"
	@echo "Library: lib$(LIB_NAME)"
	@echo "Version: $(VERSION)"
	@echo "Static:  $(STATIC_LIB)"
	@echo "Shared:  $(SHARED_LIB)"
	@echo "CLI:     $(CLI_EXECUTABLE)"
	@echo ""
	@echo "Usage:"
	@echo "  gcc -I$(INCLUDE_DIR) -L$(LIB_DIR) program.c -l$(LIB_NAME)"

# =============================================================================
# Example Usage
# =============================================================================

example: $(SHARED_LIB)
	@echo "[EXAMPLE] Creating example program"
	@echo '#include <stdio.h>' > /tmp/example.c
	@echo '#include "$(PROJECT_NAME)/nlink.h"' >> /tmp/example.c
	@echo 'int main() {' >> /tmp/example.c
	@echo '    printf("NexusLink v%s\\n", nlink_version());' >> /tmp/example.c
	@echo '    return 0;' >> /tmp/example.c
	@echo '}' >> /tmp/example.c
	$(CC) $(INCLUDE_PATHS) -L$(LIB_DIR) /tmp/example.c -l$(LIB_NAME) -o /tmp/example
	@echo "‚úÖ Example built: /tmp/example"
	@echo "Run with: LD_LIBRARY_PATH=$(LIB_DIR) /tmp/example"

# =============================================================================
# Installation
# =============================================================================

install: all
	@echo "[INSTALL] Installing NexusLink library"
	@echo "System installation requires root privileges"
	@echo "Usage: sudo make install"

# =============================================================================
# Cleanup
# =============================================================================

clean:
	@echo "[CLEAN] Removing build artifacts"
	rm -rf $(BUILD_DIR) $(BIN_DIR) $(LIB_DIR)

# =============================================================================
# Help
# =============================================================================

help:
	@echo "NexusLink C Library Build System"
	@echo "================================"
	@echo ""
	@echo "Targets:"
	@echo "  all              - Build everything (default)"
	@echo "  release          - Production build"
	@echo "  debug            - Debug build"
	@echo "  test             - Build unit tests"
	@echo "  test-run         - Build and run unit tests"
	@echo "  example          - Build example program"
	@echo "  info             - Show build information"
	@echo "  clean            - Remove build artifacts"
	@echo "  help             - Show this help"
	@echo ""
	@echo "Library Usage:"
	@echo "  gcc -I$(INCLUDE_DIR) -L$(LIB_DIR) program.c -l$(LIB_NAME)"
