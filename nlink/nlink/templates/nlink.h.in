/**
 * @file nlink.h
 * @brief Unified header for NexusLink dynamic component linkage system
 * @version @NLINK_VERSION@
 * 
 * This header provides access to all NexusLink functionality.
 * 
 * Copyright (c) 2025 NexusLink Team
 */

#ifndef NLINK_H
#define NLINK_H

#ifdef __cplusplus
extern "C" {
#endif

/* Core components */
#include <nlink/core/nlink.h>

/* Common utilities */
#include <nlink/core/common/nexus_core.h>
#include <nlink/core/common/nexus_loader.h>
#include <nlink/core/common/result.h>
#include <nlink/core/common/types.h>

/* Symbol management */
#include <nlink/core/symbols/nexus_symbols.h>
#include <nlink/core/symbols/nexus_versioned_symbols.h>
#include <nlink/core/symbols/registry.h>
#include <nlink/core/symbols/symbols.h>

/* Version management */
#include <nlink/core/versioning/nexus_version.h>
#include <nlink/core/versioning/semver.h>
#include <nlink/core/versioning/lazy_versioned.h>

/* Component minimization */
#include <nlink/core/minimizer/nexus_automaton.h>
#include <nlink/core/minimizer/nexus_minimizer.h>
#include <nlink/core/minimizer/okpala_ast.h>
#include <nlink/core/minimizer/okpala_automaton.h>

/* Pipeline system */
#include <nlink/core/pipeline/nlink_pipeline.h>
#include <nlink/core/pipeline/pipeline_detect.h>
#include <nlink/core/pipeline/pipeline_pass.h>

/* Multi-pass system */
#include <nlink/core/mpsystem/mps_pipeline.h>
#include <nlink/core/mpsystem/mps_config.h>
#include <nlink/core/mpsystem/mps_lifecycle.h>

/* Single-pass system */
#include <nlink/core/spsystem/sps_pipeline.h>
#include <nlink/core/spsystem/sps_config.h>
#include <nlink/core/spsystem/sps_lifecycle.h>

/* Pattern matching */
#include <nlink/core/pattern/matcher.h>

/* Metadata */
#include <nlink/core/metadata/metadata.h>
#include <nlink/core/metadata/enhanced_metadata.h>

/* CLI functionality (if CLI support is enabled) */
#ifdef NLINK_ENABLE_CLI
#include <nlink/cli/command.h>
#include <nlink/cli/command_registry.h>
#include <nlink/cli/command_params.h>
#include <nlink/cli/command_router.h>
#include <nlink/cli/commands/load.h>
#include <nlink/cli/commands/minimal.h>
#include <nlink/cli/commands/minimize.h>
#include <nlink/cli/commands/pipeline.h>
#include <nlink/cli/commands/version.h>
#endif

/**
 * Initialize the NexusLink system
 * 
 * This function must be called before any other NexusLink function.
 * It initializes all components and prepares the system for use.
 * 
 * @param config Path to a configuration file or NULL for default configuration
 * @return 0 on success, error code on failure
 */
int nlink_init(const char* config);

/**
 * Clean up and shut down the NexusLink system
 * 
 * This function should be called before the application exits to properly
 * clean up resources allocated by NexusLink.
 * 
 * @return 0 on success, error code on failure
 */
int nlink_shutdown(void);

/**
 * Get the NexusLink version string
 * 
 * @return A string containing the version information
 */
const char* nlink_get_version(void);

/* Minimizer functions */

/**
 * Minimize a component using state machine minimization
 * 
 * @param component_path Path to the component to minimize
 * @param level Minimization level (1-3)
 * @param output_path Path to write the minimized component
 * @return 0 on success, error code on failure
 */
int nlink_minimize_component(const char* component_path, int level, const char* output_path);

/**
 * Load a component dynamically
 * 
 * @param name Name of the component to load
 * @param version Version constraint or NULL for latest
 * @param path Optional path to load from or NULL for default paths
 * @return Handle to the loaded component or NULL on failure
 */
void* nlink_load_component(const char* name, const char* version, const char* path);

/**
 * Execute a minimal syntax command
 * 
 * Format: component[@version][:function][=args]
 * 
 * @param command The minimal syntax command to execute
 * @return Result of the command execution
 */
int nlink_minimal_command(const char* command);

/**
 * Create a pipeline for component processing
 * 
 * @param mode Pipeline execution mode ("auto", "single", or "multi")
 * @param optimization Enable or disable optimization ("enabled" or "disabled")
 * @return Handle to the created pipeline or NULL on failure
 */
void* nlink_pipeline_create(const char* mode, const char* optimization);

/**
 * Add a stage to a pipeline
 * 
 * @param pipeline Pipeline handle from nlink_pipeline_create
 * @param stage_name Name of the stage to add
 * @return 0 on success, error code on failure
 */
int nlink_pipeline_add_stage(void* pipeline, const char* stage_name);

/**
 * Execute a pipeline
 * 
 * @param pipeline Pipeline handle from nlink_pipeline_create
 * @param input Input data for the pipeline or NULL
 * @param input_size Size of the input data or 0
 * @param output Buffer to store output or NULL
 * @param output_size Pointer to size of output buffer, updated with actual size
 * @return 0 on success, error code on failure
 */
int nlink_pipeline_execute(void* pipeline, const void* input, size_t input_size, 
                          void* output, size_t* output_size);

#ifdef __cplusplus
}
#endif

#endif /* NLINK_H */